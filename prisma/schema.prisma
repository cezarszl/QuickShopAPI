generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  createdAt     DateTime       @default(now())
  facebookId    String?
  googleId      String?
  password      String?
  updatedAt     DateTime       @updatedAt
  cart          Cart?
  orders        Order[]
  products      Product[]
  refreshTokens RefreshToken[]
  favorites Favorite[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  ownerId     Int?
  categoryId  Int?
  brandId     Int?
  colorId     Int?
  cartItems   CartItem[]
  favoritedBy Favorite[]
  brand       Brand?     @relation(fields: [brandId], references: [id])
  category    Category?  @relation(fields: [categoryId], references: [id])
  color       Color?     @relation(fields: [colorId], references: [id])
  owner       User?      @relation(fields: [ownerId], references: [id])
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Brand {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Color {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Cart {
  id        String     @id @default(uuid())
  userId    Int?       @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User?      @relation(fields: [userId], references: [id])
  items     CartItem[]

  @@index([userId])
  @@index([createdAt])
}

model CartItem {
  quantity  Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@id([cartId, productId])
  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id          Int      @id @default(autoincrement())
  userId      Int
  items       Json
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  revoked   Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Favorite {
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
  @@index([userId])
  @@index([productId])
}