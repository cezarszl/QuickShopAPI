// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  email      String     @unique
  password   String?
  name       String
  googleId   String?
  facebookId String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  products   Product[]
  cart       Cart[]
  orders     Order[]
}

model Product {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  owner       User?      @relation(fields: [ownerId], references: [id])
  ownerId     Int?
  cartItems    CartItem[]
   brand       Brand?     @relation(fields: [brandId], references: [id])
  brandId     Int?
  color       Color?     @relation(fields: [colorId], references: [id])
  colorId     Int?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  products  Product[]
}

model Color {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  products  Product[]
}


model Cart {
  id        String    @id @default(uuid())
  userId    Int?      
  items     CartItem[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([createdAt]) 
}

model CartItem {
  id         String    @id @default(uuid())
  cartId     String
  productId  Int
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart       Cart      @relation(fields: [cartId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@unique([cartId, productId]) 
}



model Order {
  id          Int        @id @default(autoincrement())
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  items       Json       
  totalAmount Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}